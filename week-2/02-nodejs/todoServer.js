/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  
  const app = express();
  
  app.use(bodyParser.json());

  // Task 1
  app.get('/todos', function(req, res) {
    // Send back the entire todos array as json
    fs.readFile('./todos.json', function(err, data){
      if(err) {
        return res.send('Error opening todos.json file', err);
      }
      else {
        return res.status(200).send(JSON.parse(data));
      }
    })
  })

  // Task 2
  app.get('/todos/:id', function(req, res) {
    const requestedId = req.params['id'];

    fs.readFile('./todos.json', function(err, data) {
      if (err) throw err;
      const todos = JSON.parse(data);
      for(const todo of todos) {
        if(todo.id === parseInt(requestedId)) {
          return res.status(200).send(todo);
        }
      }
      return res.status(404).send("404 Not Found");
    });
  })

  // Task 3
  app.post('/todos', (req, res) => {
    const todos = JSON.parse(fs.readFileSync('./todos.json'));
    let id;
    if(todos.length > 0) {
      id = Math.max(...todos.map(todo => todo.id)) + 1;
    }
    else {
      id = 1;
    }
    const newTodo = Object.assign({}, {id}, req.body);
    todos.push(newTodo);
    fs.writeFileSync('./todos.json', JSON.stringify(todos));
    return res.status(201).send({id});
  })

  // Task 4
  app.put('/todos/:id', (req, res) => {
    const todoId = req.params.id;
    const todos = JSON.parse(fs.readFileSync('./todos.json'));
    const todo = todos.find((item) => item.id === parseInt(todoId));
    if(!todo) {
      return res.status(404).send('404 Not Found');
    }
    else {
      Object.assign(todo, req.body);
      // fs.writeFileSync('./todos.json', JSON.stringify(todos));
      fs.writeFile('./todos.json', JSON.stringify(todos), function(err) {
        if(err) {
          return res.status(500).send(err.toString());
        }
        return res.status(200).send("Todo updated successfully");
      })
    }
  })

  // Task 5
  app.delete('/todos/:id', (req, res) => {
    const todoId = req.params.id;
    const todos = JSON.parse(fs.readFileSync('./todos.json'));
    const remTodos = todos.filter((todo) => todo.id !== parseInt(todoId));
    if(remTodos.length === todos.length) {
      return res.status(404).send('404 Not Found');
    }
    fs.writeFile('./todos.json', JSON.stringify(remTodos), function(err) {
      if(err) {
        return res.status(500).send(err.toString())
      }
      return res.status(200).send("Todo found and deleted");
    })
  })

  app.listen(4000);
  
  module.exports = app;